/**
 * Log interface representing a log document in Firestore
 */
export interface Log {
    _id?: string; // Firestore document ID
    level: string;
    environment: string;
    projectId: string; // Project slug identifier
    projectObjectId: string; // Firestore document ID of the project
    message: string;
    stackTrace: Array<Record<string, any>>;
    rawStackTrace?: string; // Optional string representation of the original stack trace
    details: Record<string, any>;
    detailString: string | null; // Stringified version of details
    timestampMS: number; // UNIX timestamp in milliseconds
    createdAt: Date;
}

/**
 * Log creation input
 */
export interface CreateLogInput {
    level: string;
    environment: string;
    projectId: string;
    message: string;
    stackTrace?: Array<Record<string, any>>;
    rawStackTrace?: string; // Optional string representation of the original stack trace
    details?: Record<string, any>;
    detailString?: string | null; // Stringified version of details - will be generated by API
    timestampMS?: number; // Optional - will be generated by API if not provided
}

/**
 * Log query parameters for filtering and pagination
 */
export interface LogQueryParams {
    page?: number;
    pageSize?: number;
    level?: string;
    environment?: string;
}

/**
 * Message match type for filtering logs
 */
export type MessageMatchType = 'contains' | 'startsWith' | 'endsWith';

/**
 * Message condition (single phrase with match type)
 */
export interface MessageCondition {
    phrase: string;
    matchType: MessageMatchType;
}

/**
 * Message filter with AND/OR logic
 */
export interface MessageFilter {
    operator: 'AND' | 'OR';
    conditions: MessageCondition[];
}

/**
 * Request body for querying logs
 */
export interface QueryLogsRequest {
    page?: number;
    pageSize?: number;
    level?: string;
    environment?: string;
    message?: MessageFilter;
    stackTrace?: MessageFilter; // Filter for rawStackTrace field
    details?: MessageFilter; // Filter for detailString field
}
